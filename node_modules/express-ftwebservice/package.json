{
  "_args": [
    [
      "express-ftwebservice@git+http://git.svc.ft.com:8080/scm/ot/express-ftwebservice.git",
      "/Users/jake/Projects/work/ft/labs/big-ft"
    ]
  ],
  "_from": "git+http://git.svc.ft.com:8080/scm/ot/express-ftwebservice.git",
  "_id": "express-ftwebservice@1.1.1",
  "_inCache": true,
  "_location": "/express-ftwebservice",
  "_phantomChildren": {},
  "_requested": {
    "name": "express-ftwebservice",
    "raw": "express-ftwebservice@git+http://git.svc.ft.com:8080/scm/ot/express-ftwebservice.git",
    "rawSpec": "git+http://git.svc.ft.com:8080/scm/ot/express-ftwebservice.git",
    "scope": null,
    "spec": "http://git.svc.ft.com:8080/scm/ot/express-ftwebservice.git",
    "type": "git"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git+http://git.svc.ft.com:8080/scm/ot/express-ftwebservice.git#b165197b99c95adb53b61b03b7ca24bd257e186e",
  "_shasum": "81708d28bf1a67f47ebc4c5b6e84695cf4fb7d60",
  "_shrinkwrap": null,
  "_spec": "express-ftwebservice@git+http://git.svc.ft.com:8080/scm/ot/express-ftwebservice.git",
  "_where": "/Users/jake/Projects/work/ft/labs/big-ft",
  "dependencies": {},
  "description": "Install FT Web Standard web service descriptions in an Express.js application",
  "devDependencies": {},
  "gitHead": "b165197b99c95adb53b61b03b7ca24bd257e186e",
  "installable": true,
  "name": "express-ftwebservice",
  "optionalDependencies": {},
  "readme": "# Express FT Web Service Description\n\nInstalls routes for `/__gtg`, `/__health`, and `/__about`.\n\n# Example\n\nBasic example:\n\n```JS\nvar path = require('path');\nvar ftwebservice = require('ftwebservice');\nvar express = require('express');\nvar app = express();\n\nftwebservice(app, {\n\tmanifestPath: path.join(__dirname, 'package.json')\n\tabout: {\n\t\t\"schemaVersion\": 1,\n\t\t\"name\": \"build-service\",\n\t\t\"purpose\": \"Front end build process as a service.  Fetches specified Origami components from git, runs Origami build process, and returns the resulting CSS or JS bundle over HTTP.\",\n\t\t\"audience\": \"public\",\n\t\t\"primaryUrl\": \"https://build.origami.ft.com\",\n\t\t\"serviceTier\": \"gold\"\n\t}\n});\n```\n\nExample with Good To Go logic and Healthcheck logic:\n\n```JS\nftwebservice(app, {\n\tmanifestPath: path.join(__dirname, 'package.json')\n\tabout: {\n\t\t\"schemaVersion\": 1,\n\t\t\"name\": \"build-service\",\n\t\t\"purpose\": \"Front end build process as a service.  Fetches specified Origami components from git, runs Origami build process, and returns the resulting CSS or JS bundle over HTTP.\",\n\t\t\"audience\": \"public\",\n\t\t\"primaryUrl\": \"https://build.origami.ft.com\",\n\t\t\"serviceTier\": \"gold\"\n\t}\n\tgoodToGoTest: function() {\n\t\treturn new Promise(function(resolve, reject) {\n\t\t\tresolve(isApplicationHappy());\n\t\t});\n\t},\n\thealthCheck: function() {\n\t\t// You might have several async checks that you need to perform or\n\t\t// collect the results from, this is a really simplistic example\n\t\treturn new Promise(function(resolve, reject) {\n\t\t\tresolve([\n\t\t\t\t{\n\t\t\t\t\tname: \"Database TCP connectivity\",\n\t\t\t\t\tok: false,\n\t\t\t\t\tseverity: 2,\n\t\t\t\t\tbusinessImpact: \"Article pages will not be available\",\n\t\t\t\t\ttechnicalSummary: \"The database is dead\",\n\t\t\t\t\tpanicGuide: \"Check the health status of the database at host <database host>\",\n\t\t\t\t\tcheckOutput: \"tcp connect failed after 10 seconds on destination port 3306 - destination unreachable\",\n\t\t\t\t\tlastUpdated: new Date().toISOString()\n\t\t\t\t}\n\t\t\t]);\n\t\t});\n\t}\n});\n```\n\n## Options\n\n| Option | Description |\n|--------|-------------|\n| `manifestPath` | (Optional) Path to the app's package.json file. This will be used to populate the `appVersion` and `dateDeployed` properties of the /__about endpoint, if they are not specified explicitly. |\n| `about` | (Optional) Object containing standard runbook propeties as defined in the [FT Runbook standard](https://docs.google.com/document/d/1B80a0nAI8L1cuIlSEai4Zuztq7Lef0ytxJYNFCjG7Ko/edit#) |\n| `goodToGoTest` | (Optional) A function that can be used to indicate the good to go status of the service, the function should return a Promise resolved with `true` to indicate a positive good to go status, and `false` to indicate a negative good to go status. |\n| `healthCheck` | (Optional) A function that can be used to generate structured healthcheck information, the function should return a Promise resolved with an array of healthcheck objects. |\n\n# License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "None"
  },
  "version": "1.1.1"
}
